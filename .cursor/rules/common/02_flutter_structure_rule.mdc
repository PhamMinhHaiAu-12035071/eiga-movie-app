---
description: 
globs: 
alwaysApply: false
---
---
description: 
globs: 
alwaysApply: false
---
# 📌 CursorRule: Flutter Project Structure & Coding Standards (Ultimate Guide - EN)

> 🧠 This is a technical guideline for **Cursor AI** and all Flutter developers to ensure the source code adheres to standard architecture, is readable, maintainable, extensible, and supports automation through AI. It includes Clean Architecture, Clean Code, Design Patterns, Commenting Rule, Naming, Formatting, Testing, and more than 15 professional software development principles.

---

## 🎯 Objectives & Target Audience

- **For:** Cursor AI, Technical Lead, Flutter Developers from mid-level and above.
- **Applies:** When creating new/refactoring Flutter projects or scaling teams.
- **Goals:**
  - Standardize the structure and codebase for large-scale Flutter projects.
  - Optimize readability, extensibility, testing, and support for Cursor AI.

---

## 📂 Project Directory Structure (Clean Architecture)

```plaintext
lib/
├── core/                         # System configuration
│   ├── di/                      # Dependency Injection (GetIt, Injectable)
│   ├── router/                  # Navigation (auto_route)
│   ├── asset/                   # Asset management
│   ├── styles/                  # UI styles definitions (colors, text styles)
│   ├── sizes/                   # Size and dimension constants
│   ├── durations/               # Duration constants for animations
│   └── themes/                  # Theme management
│       ├── extensions/          # Theme extensions for assets, colors, etc.
│       │   └── extensions.dart  # Barrel file for all theme extensions
│       ├── app_theme.dart       # Main theme configuration
│       └── themes.dart          # Barrel file for all theme exports
├── features/                    # Feature module separation
│   └── [feature_name]/
│       ├── domain/              # Business logic and rules
│       │   ├── models/          # Business entities/models
│       │   └── repositories/    # Repository interfaces
│       ├── infrastructure/      # Implementation of repositories
│       │   └── repositories/    # Repository implementations
│       ├── application/         # State management and use cases
│       │   └── cubit/           # Cubits/BLoCs
│       └── presentation/        # UI, page, widget, router
│           └── widgets/         # Reusable UI components
├── shared/                      # Reusable resources
│   └── widgets/                 # Shared widgets
├── generated/                   # Generated code (assets, translations)
├── app.dart                     # Main application widget
├── bootstrap.dart               # Application initialization
├── main_development.dart        # Entry point for development environment
├── main_staging.dart           # Entry point for staging environment
└── main_production.dart         # Entry point for production environment
```

### 📘 Structure Explanation
| Directory   | Purpose                                                                 |
|-------------|-------------------------------------------------------------------------|
| `core/`     | Core configuration for the entire system – not belonging to any feature |
| `features/` | Modules divided by functionality – easy to scale, maintain, and test separately |
| `shared/`   | Reusable widgets and logic across modules                               |
| `generated/`| Auto-generated code from the build_runner or other code generators      |

### 📘 Core Directory Structure
```
core/
├── di/                          # Dependency Injection
│   ├── injection.dart           # Main DI configuration
│   ├── injection.config.dart    # Generated DI configuration
│   ├── api_module.dart          # API client DI module
│   └── local_storage_module.dart # Storage DI module
├── router/                      # Navigation
│   ├── app_router.dart          # Main router configuration
│   ├── app_router.gr.dart       # Generated router code
│   └── routes.dart              # Route constants
├── asset/                       # Asset management
│   ├── app_asset.dart           # Asset access class
│   └── app_image.dart           # Image asset handling
├── styles/                      # UI style definitions
│   ├── colors/                  # Color definitions
│   │   └── app_colors.dart      # Application colors
│   ├── app_text_styles.dart     # Text style definitions
│   └── styles.dart              # Barrel file for all styles
├── sizes/                       # Size constants
│   ├── app_sizes.dart           # Size definitions
│   └── sizes.dart               # Barrel file for sizes
├── durations/                   # Animation durations
│   ├── app_durations.dart       # Duration definitions
│   └── durations.dart           # Barrel file for durations
└── themes/                      # Theme management
    ├── extensions/              # Theme extensions
    │   ├── app_asset_extension.dart # Asset theming
    │   ├── app_color_extension.dart # Color theming
    │   └── extensions.dart      # Barrel file for extensions
    ├── app_theme.dart           # Theme configuration
    └── themes.dart              # Barrel file for themes
```

### 📘 Test Directory Structure
```
test/
├── core/                     # Tests for core functionality
│   ├── di/                   # DI tests
│   │   ├── injection_test.dart           # Main DI tests
│   │   ├── api_module_test.dart          # API module tests
│   │   └── local_storage_module_test.dart # Storage module tests
│   ├── router/               # Router tests
│   │   └── app_router_test.dart          # Router tests
│   ├── styles/               # Styles tests
│   │   ├── colors/                        # Color tests
│   │   │   └── app_colors_test.dart        # Color tests
│   │   └── app_text_styles_test.dart      # Text style tests
│   ├── sizes/                # Sizes tests
│   │   └── app_sizes_test.dart           # Size tests
│   ├── durations/            # Durations tests
│   │   └── app_durations_test.dart       # Duration tests
│   ├── themes/               # Theme tests
│   │   ├── extensions/                  # Extension tests
│   │   │   ├── app_asset_extension_test.dart # Asset extension tests
│   │   │   └── app_color_extension_test.dart # Color extension tests
│   │   └── app_theme_test.dart         # Theme tests
│   └── asset/                # Asset tests
│       └── app_image_test.dart          # Image tests
├── features/                # Feature-specific tests
├── shared/                  # Tests for shared components
└── integration/             # Integration tests
```

---

## ✅ Checklist for Creating a New Feature

```bash
# 1. Create a standard structure directory
lib/features/your_feature/presentation

# 2. Create UI components (presentation layer)
# 3. Set up navigation in the router
# 4. Add the feature to the main app flow
```

---## 💬 Commenting Rule – Supporting AI & Readability

> Comments are **mandatory** for Cursor AI and developers when reading or generating code.

- [x] Comment at the beginning of classes/functions (`///` or `/** */`).
- [x] Comment on major logic: loops, if/else, calculations, states.
- [x] Use inline comments if clarification is needed at a line.

```dart
/// Displays a list of users with interactive buttons
class UserListPage extends StatelessWidget {
  const UserListPage({super.key});

  @override
  Widget build(BuildContext context) {
    final bloc = context.read<UserBloc>();

    return Scaffold(
      appBar: AppBar(title: const Text('Users')),
      body: BlocBuilder<UserBloc, UserState>(
        builder: (context, state) {
          if (state is Loading) {
            return const CircularProgressIndicator(); // Loading
          } else if (state is Success) {
            return ListView(
              children: [
                for (final user in state.users)
                  ListTile(title: Text(user.name))
              ],
            );
          } else {
            return const Text('No data');
          }
        },
      ),
    );
  }
}
```

---

## 🔠 Naming Conventions

| Item           | Rule         | Example                         |
|----------------|--------------|---------------------------------|
| Class          | PascalCase   | `LoginPage`, `AuthBloc`        |
| File/folder    | snake_case   | `login_form.dart`              |
| Function/var   | camelCase    | `fetchUser()`, `isLoading`     |
| Const/Enum     | SCREAM_CASE  | `MAX_ITEMS`, `USER_ROLE.admin` |
| Private        | `_` prefix   | `_counter`, `_onPressed()`     |
| Test file      | `_test.dart` | `login_bloc_test.dart`         |

---

## 📄 File Splitting & Size Guidelines

| Component     | Limit          | Notes                               |
|---------------|----------------|-------------------------------------|
| Dart File     | ≤ 300 lines    | Easy to read, easy to review, should be split if exceeded |
| Class         | 1–2 responsibilities | Follow Single Responsibility Principle |
| Function      | ≤ 40 lines     | Split if logic is complex           |
| build()       | ≤ 50 lines     | Extract child widgets               |

---## 📚 Code Style & Formatting Rules

- Use `const` wherever possible.
- Use `final` by default – only use var if mutating.
- Maximum of 3 levels of nested logic (if-else, loop...).
- Automatically format code (`dart format`, IDE).
- Follow `very_good_analysis` standards.

### 🛠️ Utility Libraries Usage

- Use extension methods from `dartx` instead of custom utility functions when possible.
- Prefer `nil` package for null checking and handling optional values.
- Use `gap` for consistent spacing in UI rather than custom SizedBox widgets.
- Leverage `basic_utils` for common operations instead of implementing custom solutions.
- Implement `flutter_hooks` for stateful logic in functional components.
- Use `path_provider` for accessing standard file system locations.
- Apply `logger` for consistent, readable logging across the application.
- Access device and app information with `device_info_plus` and `package_info_plus`.
- Use `collection` for advanced operations on lists, maps, and iterables.
- Add `@required` and other annotations from `meta` to improve code clarity.
- Use `after_layout` for post-layout initialization and measurements.
- Manage environment variables securely with `envied` instead of hardcoding.

---

## 🧠 Advanced Software Principles

| Principle           | Goals & Notes |
|---------------------|---------------|
| **SOLID**           | 5 core OOP principles – scalable architecture |
| **Dependency Inversion** | Depend on abstractions not implementations; use service interfaces |
| **DRY**             | Avoid code duplication – use common helpers/widgets |
| **KISS**            | Keep code as simple as possible |
| **YAGNI**           | Only build what is needed |
| **Law of Demeter**  | Avoid calling methods too far down the dependency chain |
| **PoLA**            | Code behavior should match the reader's expectations |
| **Composition > Inheritance** | Easier to extend in the long run |
| **Low Coupling**    | Reduce dependencies between modules |
| **High Cohesion**   | Each piece of code should do one task only |
| **Encapsulation**   | Hide internal details, only expose necessary interfaces |
| **Separation of Concerns** | UI, Logic, Data should be separated |
| **GRASP**           | Principles for assigning responsibilities in OOP |
| **CoC (Convention > Config)** | Easier to read and set up quickly |
| **Information Expert** | Assign responsibilities to the place that understands the data best |
| **Protected Variations** | Place abstraction where changes are likely |

---

## 🧩 Applicable Design Patterns

| Pattern     | Context |
|-------------|---------|
| **Factory** | Create models from JSON responses |
| **Singleton** | Global DI (GetIt) |
| **Strategy** | Change themes, change strategy handlers |
| **Observer** | Bloc/Cubit → UI updates |
| **Repository** | Separate interface/data implementation |
| **Service Abstraction** | Decouple from external dependencies with interfaces |

---

## 🧪 Testing Guidelines

| Component       | Test Type     | Recommended Tools          |
|------------------|---------------|-----------------------------|
| Bloc/Cubit       | Unit test     | `bloc_test`, `mocktail`     |
| UI/Page/Widget   | Widget test   | `flutter_test`              |
| UseCase/Service  | Unit test     | `test`, `mocktail`          |
| API & parsing    | Response test | `chopper_mock`, `dio_adapter` |

### 📌 Coverage Target: **>= 99.99%** (use `--coverage`)

---

## 🧭 Tooling & Automation

| Tool                | Purpose |
|---------------------|---------|
| `fvm`               | Manage Flutter versions per project |
| `very_good_cli`     | Scaffold Clean Architecture projects, flavors |
| `build_runner`      | Code generation for DI, JSON, freezed... |
| `injectable`, `get_it` | Dependency Injection |
| `mason`             | Quickly create feature/widget templates |
| `flutter_gen`       | Automatically manage assets safely |
| `dart_code_metrics` | Analyze code quality |
| `flutter_screenutil` | Responsive UI across devices |
| `slang`, `slang_build_runner` | Type-safe, code-generated localization system |
| `basic_utils` | Collection of utility functions for common operations |
| `nil` | Null-safety utilities for clean, expressive code |
| `gap` | Simple widget for spacing in UI layouts |
| `dartx` | Extension methods enhancing core Dart classes |
| `flutter_hooks` | React-like hooks for state management and side-effects |
| `path_provider` | Platform-specific file system locations |
| `package_info_plus` | Access app package information (version, name) |
| `collection` | Advanced collection operations and utilities |
| `meta` | Annotations for more expressive code |
| `device_info_plus` | Access device-specific information |
| `logger` | Pretty, easy to use and extensible logger |
| `after_layout` | Execute code after first widget layout |
| `envied` | Type-safe environment variables handling |

---
## ✅ Cursor Checklist – During Code Analysis or Code Generation

- [ ] Correct structure of `core/`, `features/`, `shared/`, `generated/`
- [ ] Each feature has a `presentation/` layer
- [ ] Sufficient comments for classes, functions, and important logic
- [ ] No overly long classes/methods/files
- [ ] Logic & UI tests are present
- [ ] Variable, class, file names follow naming conventions
- [ ] No warnings from `flutter analyze`
- [ ] Clear separation between UI components
- [ ] Environment configuration is properly set up in `features/env/`
- [ ] Assets are properly managed through the generated code in `generated/`

---

## 📚 References

- [Clean Architecture – Uncle Bob](mdc:https:/8thlight.com/blog/uncle-bob/2012/08/13/the-clean-architecture.html)
- [Effective Dart](mdc:https:/dart.dev/guides/language/effective-dart)
- [Bloc Pattern](mdc:https:/bloclibrary.dev/#)
- [GRASP Patterns](mdc:https:/en.wikipedia.org/wiki/GRASP_(object-oriented_design))
- [Very Good Ventures Blog](mdc:https:/verygood.ventures/blog)
- [slang – Dart i18n made easy](mdc:https:/pub.dev/packages/slang)
- [Flutter Hooks Documentation](mdc:https:/pub.dev/packages/flutter_hooks)
- [Logger Package](mdc:https:/pub.dev/packages/logger)
- [Collection & Meta Packages](mdc:https:/dart.dev/guides/libraries/useful-libraries)
- [After Layout Documentation](mdc:https:/pub.dev/packages/after_layout)
- [Envied - Secure Environment Variables](mdc:https:/pub.dev/packages/envied)

---

## 🔐 Environment Configuration Best Practices

### 📁 Directory Structure
```
lib/features/env/
├── domain/                 # Environment repository interface
│   └── env_config_repository.dart
├── infrastructure/         # Environment repository implementation
│   └── env_config_repository_impl.dart
└── env_[environment].dart  # Environment-specific configuration
```

### 🛡️ Security Guidelines

1. **Environment Files**
   - Store `.env` files in `lib/assets/env/`
   - Never commit `.env` files to version control
   - Provide `.env.example` templates

2. **Code Generation**
   - Use `envied` with `obfuscate: true`
   - Generate separate files for each environment
   - Keep generated files in version control

3. **Access Pattern**
   - Use repository pattern for environment access
   - Inject environment config through DI
   - Never access env variables directly in features

### 📝 Example Implementation

```dart
// 1. Define repository interface
abstract class EnvConfigRepository {
  String get apiUrl;
  String get appName;
}

// 2. Create environment class
@Envied(path: 'lib/assets/env/.env.dev', obfuscate: true)
abstract class EnvDev {
  @EnviedField(varName: 'API_URL')
  static String apiUrl = _EnvDev.apiUrl;
}

// 3. Implement repository
@LazySingleton(as: EnvConfigRepository)
class EnvConfigRepositoryImpl implements EnvConfigRepository {
  @override
  String get apiUrl => EnvDev.apiUrl;
}

// 4. Use in features through DI
class MyService {
  final EnvConfigRepository _env;
  
  MyService(this._env);
  
  Future<void> makeRequest() {
    final url = _env.apiUrl;
    // Use url...
  }
}
```

---

## 📚 Feature Implementation Examples

### 🌟 Onboarding Feature Example

The onboarding feature demonstrates how to implement a complete feature using Clean Architecture. This pattern can be replicated for other features.

#### 📂 Directory Structure

```
lib/features/onboarding/
├── domain/
│   ├── models/
│   │   └── onboarding_info.dart       # Data model for onboarding slides
│   └── repositories/
│       └── onboarding_repository.dart # Repository interface
├── infrastructure/
│   └── repositories/
│       └── onboarding_repository_impl.dart  # Repository implementation
├── application/
│   └── cubit/
│       ├── onboarding_cubit.dart      # State management
│       └── onboarding_state.dart      # State definitions
├── presentation/
│   ├── onboarding_page.dart           # Main page
│   └── widgets/
│       ├── onboarding_page_view.dart  # Slide display
│       ├── onboarding_dot_indicator.dart # Progress indicator
│       └── onboarding_next_button.dart # Navigation button
└── README.md                          # Feature documentation
```

#### 🧩 Implementation Patterns

1. **Domain Layer**:
   - Models define pure data structures (`OnboardingInfo`)
   - Repository interfaces specify contracts (`IOnboardingRepository`)

2. **Infrastructure Layer**:
   - Implements repository interfaces (`OnboardingRepository`)
   - Handles data storage (e.g., using `SharedPreferences`)

3. **Application Layer**:
   - State management with `OnboardingCubit` and `OnboardingState`
   - Encapsulates business logic

4. **Presentation Layer**:
   - Main page (`OnboardingPage`) uses Auto Route for navigation
   - Reusable UI components in the `widgets` folder
   - Uses ScreenUtil for responsive design

#### 🧠 Design Patterns Applied

- **Repository Pattern**: Abstracts data operations
- **BLoC/Cubit Pattern**: Separates UI from business logic
- **Dependency Injection**: Components receive their dependencies
- **Builder Pattern**: Complex UI broken into smaller widgets

#### 📑 Best Practices

- Clear comments on every class and important method
- Single Responsibility for each class
- Error handling for asset loading
- Responsive design using ScreenUtil
- Clean separation between data, logic, and UI

### Service Layer
- Place service abstractions in `core/services` directory
- Define interfaces for external dependencies (e.g., `LocalStorageService`)
- Implement concrete services that fulfill these interfaces
- Inject services via DI instead of direct dependencies
- Follow naming convention: Interface (`ServiceName`), Implementation (`ServiceNameImpl`)
- Benefits: testability, swappable implementations, adherence to SOLID

### Persistence
- Storage abstracted through `LocalStorageService` interface
- Primary implementation via `SharedPreferencesStorageService` for simple data
- More complex data structures may use SQLite or Hive
- All storage operations follow the interface contract
- Features depend on the abstraction, not concrete implementations

---
## Feature Implementation Checklist

- [ ] Domain layer is properly defined with entities, repositories, and use cases
- [ ] Application layer has proper state management with BLoCs/Cubits
- [ ] Infrastructure layer implements repositories and data sources
- [ ] Presentation layer has widgets and screens
- [ ] Dependencies are properly registered
- [ ] Tests are written for all layers
- [ ] Environment configuration is properly set up in `features/env/`

> 💡 Treat this as a foundational guide for any modern Flutter project. With both Cursor AI and developers following this rule, it ensures a scalable, maintainable, and high-quality codebase that benefits from powerful AI-assisted development.

# Add note:
- The `core/themes/extensions/extensions.dart` file is the index for all theme extensions, and `core/themes/themes.dart` is the main barrel file for theme exports.
- The test structure now includes `test/core/themes` for theme-related tests and coverage.






